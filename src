using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace day11
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] input = File.ReadAllLines("input.txt");
            List<char[]> floorPlan = new List<char[]>();         
            input.ToList().ForEach(s => floorPlan.Add(s.ToCharArray()));
            List<char[]> temp = new List<char[]>();
            input.ToList().ForEach(s => temp.Add(s.ToCharArray()));

            int passes = 0;
            int seatToleranceThreshold = 5;
            while (true)
            {
                passes++;
                for (int y = 0; y < floorPlan.Count; y++)
                {
                    for (int x = 0; x < floorPlan[y].Length; x++)
                    {
                        char currentSeat = floorPlan[y][x];
                        int numOccupied = getSurroundingOccupiedSeats(x, y, floorPlan);
                        if (currentSeat == 'L' && numOccupied == 0)
                        {
                            temp[y][x] = '#';
                        }
                        else if (currentSeat == '#' && numOccupied >= seatToleranceThreshold)
                        {
                            temp[y][x] = 'L';
                        }
                    }
                }
                if (listsAreEqual(floorPlan, temp))
                {
                    break;
                }
                else
                {
                    for (int y = 0; y < temp.Count; y++)
                    {
                        for (int x = 0; x < temp[y].Length; x++)
                        {
                            floorPlan[y][x] = temp[y][x];
                        }
                    }
                }
                Console.WriteLine($"pass {passes}");
            }

            floorPlan.ForEach(a => { a.ToList().ForEach(c => Console.Write(c)); Console.WriteLine(); });
            int numberOfOccupiedSeats = 0;

            //count number of occupied seats
            foreach (char[] row in floorPlan)
            {
                foreach (char column in row)
                {
                    if (column == '#')
                        numberOfOccupiedSeats++;
                }
            }
            Console.WriteLine(passes + " passes");
            Console.WriteLine(numberOfOccupiedSeats + " seats occupied");
            Console.ReadLine();
        }

        private static bool listsAreEqual(List<char[]> list1, List<char[]> list2)
        {
            if (list1.Count != list1.Count)            
                return false;
            
            for (int i = 0; i< list1.Count; i++)
			{
                if (!list1[i].SequenceEqual(list2[i]))
                    return false;
			}

            return true;
        }

        private static int getSurroundingOccupiedSeats(int x, int y, List<char[]> floorPlan)
        {
            int adjacentOccupied = 0;
            bool seatFound = false;
            int startX = x, startY = y;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (x - 1 < 0 || y + 1 >= floorPlan.Count)
                    break;

                if ((y + 1) < floorPlan.Count && (x - 1) >= 0)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    }
                    else
                    if (floorPlan[y + 1][x - 1] == '.')
                    {
                        x--; y++;
                    }
                    else if (floorPlan[y + 1][x - 1] == '#')
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }                    
                }
            }
            seatFound = false;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (y + 1 >= floorPlan.Count)
                    break;

                if ((y + 1) < floorPlan.Count)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    } else
                    if (floorPlan[y + 1][x] == '.')
                    {
                        y++;
                    }
                    else if (floorPlan[y + 1][x] == '#')
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }                  
                } 
            }
            seatFound = false;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (x + 1 >= floorPlan[0].Length || y + 1 >= floorPlan.Count)
                    break;

                if ((y + 1) < floorPlan.Count && (x + 1) < floorPlan[0].Length)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    }
                    else
                    if (floorPlan[y + 1][x + 1] == '.')
                    {
                        x++; y++;
                    }
                    else if (floorPlan[y + 1][x + 1] == '#')
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }                  
                } 
            }
            seatFound = false;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (x - 1 < 0)
                    break;

                if ((x - 1) >= 0)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    }
                    else
                    if (floorPlan[y][x - 1] == '.')
                    {
                        x--;
                    }
                    else
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }
                } 
            }
            seatFound = false;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (x + 1 >= floorPlan[0].Length)
                    break;

                if ((x + 1) < floorPlan[0].Length)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    }
                    else
                    if (floorPlan[y][x + 1] == '.')
                    {
                        x++;
                    }
                    else if (floorPlan[y][x + 1] == '#')
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }                  
                } 
            }
            seatFound = false;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (x - 1 < 0 || y - 1 < 0)
                    break;

                if ((x - 1) >= 0 && (y - 1) >= 0)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    }
                    else
                    if (floorPlan[y - 1][x - 1] == '.')
                    {
                        x--; y--;
                    }
                    else if (floorPlan[y - 1][x - 1] == '#')
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }                   
                } 
            }
            seatFound = false;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (y - 1 < 0)
                    break;

                if ((y - 1) >= 0)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    }
                    else
                    if (floorPlan[y - 1][x] == '.')
                    {
                        y--;
                    }
                    else if (floorPlan[y - 1][x] == '#')
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }                  
                } 
            }
            seatFound = false;
            x = startX;
            y = startY;
            while (!seatFound)
            {
                if (x + 1 >= floorPlan[0].Length || y - 1 < 0)
                    break;

                if ((x + 1) < floorPlan[0].Length && (y - 1) >= 0)
                {
                    if (floorPlan[y + 1][x] == 'L')
                    {
                        seatFound = true;
                    }
                    else
                    if (floorPlan[y - 1][x + 1] == '.')
                    {
                        x++; y--;
                    }
                    else if (floorPlan[y - 1][x + 1] == '#')
                    {
                        adjacentOccupied++;
                        seatFound = true;
                    }                
                } 
            }
            return adjacentOccupied;
        }
    }
}

